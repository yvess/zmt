#!/usr/bin/env python3
# coding: utf-8

import argparse
import subprocess
import configparser
import os
from datetime import datetime


class ZfsTools:
    def __init__(self, args, config):
        self.args = args
        self.config = config

    def autosnap(self):
        running_vms = subprocess.check_output(
            'virsh list --name',
            universal_newlines=True, shell=True
        ).splitlines()
        running_vms = [vm for vm in running_vms if vm]
        if not running_vms:
            print("No vms running")
        if not os.path.exists('/var/lib/zmt/autosnap/'):
            os.makedirs('/var/lib/zmt/autosnap/', exist_ok=True)
        for vm in running_vms:
            now = datetime.now()
            snap = {
                'main': self.config['vm']['main'],
                'vm': vm,
                'name': 'autosnap-%s' % now.strftime('%Y-%m-%d_%H:%M:%S'),
                'host_mirror': self.config['vm']['host_mirror'],
                'inc': ''
            }

            # get last autosnap
            autosnap_fname = '/var/lib/zmt/autosnap/%s' % snap['vm']
            if os.path.exists(autosnap_fname):
                with open(autosnap_fname) as last_autosnap:
                    snap['inc'] = '-I @%s' % last_autosnap.read().strip()

            # create local snapshot
            cmd = 'zfs snap -r {main}/{vm}@{name}'.format(**snap)
            subprocess.check_call(cmd, universal_newlines=True, shell=True)

            # check if host mirror is reachable
            cmd = 'ping -O -c 1 {host_mirror}'.format(**snap)
            ping_exitcode, ping_output = subprocess.getstatusoutput(
                cmd
            )

            if ping_exitcode == 0:
                # send it to host mirror
                cmd = 'zfs send -Rv {inc} {main}/{vm}@{name} | ssh {host_mirror} "zfs recv {main}/{vm}"'.format(**snap)
                subprocess.check_output(cmd, universal_newlines=True, shell=True)

                # write last autosnap
                with open(autosnap_fname, 'w') as last_autosnap:
                    last_autosnap.write(snap['name'])
            else:
                print("Mirror host is down, trying it next time")

    def backup(self):
        snaps = subprocess.check_output(
            'zfs list -H -S creation -r -o name,creation -t snap backup',
            universal_newlines=True, shell=True
        )
        print(snaps)


class ZfsParser:
    def __init__(self):
        self.parser = argparse.ArgumentParser(
            description="""zfs management tools,
                           for snapshoting, replication, backup""")
        self.subparsers = self.parser.add_subparsers(
            help='avaiable commands')
        self.parser_autosnap(self.subparsers)
        self.parser_backup(self.subparsers)
        self.config = configparser.ConfigParser()
        self.config.read('/etc/zmt/zmt.ini')

    def run(self):
        args = self.parser.parse_args()
        if not hasattr(args, 'command'):
            self.parser.print_help()
            exit()
        zfstools = ZfsTools(args, self.config)

        if hasattr(zfstools, args.command):
            getattr(zfstools, args.command)()
        else:
            print('command %s not known' % args.command)

    def parser_autosnap(self, subparsers):
        parser_autosnap = self.subparsers.add_parser(
            'autosnap',
            help='create a snapshot'
        )
        parser_autosnap.add_argument('--bar', help='bar help')
        parser_autosnap.set_defaults(command='autosnap')

    def parser_backup(self, subparsers):
        parser_backup = self.subparsers.add_parser(
            'backup',
            help='create a backup'
        )
        parser_backup.add_argument('--bar', help='bar help')
        parser_backup.set_defaults(command='backup')


def main():
    # main parser
    zfs_parser = ZfsParser()
    zfs_parser.run()


if __name__ == '__main__':
    main()
