#!/usr/bin/env python3
# coding: utf-8

import argparse
import subprocess
import configparser
from datetime import datetime


class ZfsTools:
    def __init__(self, args, config):
        self.args = args
        self.config = config

    def autosnap(self):
        running_vms = subprocess.check_output(
            "virsh list --name",
            universal_newlines=True, shell=True
        ).splitlines()
        running_vms = [vm for vm in running_vms if vm]
        for vm in running_vms:
            now = datetime.now()
            snap = {
                'main': self.config['vm']['main'],
                'vm': vm,
                'name': "autosnap-%s" % now.strftime("%Y-%m-%d_%H:%M:%S"),
                'host_mirror': self.config['vm']['host_mirror']
            }
            # create local snapshot
            subprocess.check_call(
                "zfs snap -r {main}/{vm}@{name}".format(**snap),
                universal_newlines=True, shell=True
            )
            # check if host mirror is reachable
            subprocess.check_output(
                "ping -O -c 2 -W 2 {host_mirror}".format(**snap),
                universal_newlines=True, shell=True
            )
            # send it to host mirror
            subprocess.check_call(
                'zfs send {main}/{vm}@{name} | ssh root@{host_mirror} "zfs recv {main}/{vm}"'.format(**snap),
                universal_newlines=True, shell=True
            )
            with open("/var/lib/zmt/autosnap/%s" % snap['vm'], "w+") as last_autosnap:
                last_autosnap.write(snap['name'])
        snaps = subprocess.check_output(
            "zfs list -H -S creation -r -o name,creation -t snap tank/vm",
            universal_newlines=True, shell=True
        )
        print(snaps)

    def backup(self):
        snaps = subprocess.check_output(
            "zfs list -H -S creation -r -o name,creation -t snap backup",
            universal_newlines=True, shell=True
        )
        print(snaps)


class ZfsParser:
    def __init__(self):
        self.parser = argparse.ArgumentParser(
            description="""zfs management tools,
                           for snapshoting, replication, backup""")
        self.subparsers = self.parser.add_subparsers(
            help='avaiable commands')
        self.parser_autosnap(self.subparsers)
        self.parser_backup(self.subparsers)
        self.config = configparser.ConfigParser()
        self.config.read('/etc/zmt/zmt.ini')

    def run(self):
        args = self.parser.parse_args()
        if not hasattr(args, 'command'):
            self.parser.print_help()
            exit()
        zfstools = ZfsTools(args, self.config)

        if hasattr(zfstools, args.command):
            getattr(zfstools, args.command)()
        else:
            print('command %s not known' % args.command)

    def parser_autosnap(self, subparsers):
        parser_autosnap = self.subparsers.add_parser(
            'autosnap',
            help='create a snapshot'
        )
        parser_autosnap.add_argument('--bar', help='bar help')
        parser_autosnap.set_defaults(command='autosnap')

    def parser_backup(self, subparsers):
        parser_backup = self.subparsers.add_parser(
            'backup',
            help='create a backup'
        )
        parser_backup.add_argument('--bar', help='bar help')
        parser_backup.set_defaults(command='backup')


def main():
    # main parser
    zfs_parser = ZfsParser()
    zfs_parser.run()


if __name__ == '__main__':
    main()
